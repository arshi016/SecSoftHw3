//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniC.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, True=27, False=28, Identifier=29, Int=30, Single_string=31, 
		WS=32;
	public const int
		RULE_program = 0, RULE_declarations = 1, RULE_decl = 2, RULE_type = 3, 
		RULE_sectype = 4, RULE_block = 5, RULE_command = 6, RULE_noopCommand = 7, 
		RULE_assignCommand = 8, RULE_ifCommand = 9, RULE_whileCommand = 10, RULE_printSCommand = 11, 
		RULE_printECommand = 12, RULE_getIntCommand = 13, RULE_getSecretIntCommand = 14, 
		RULE_exp = 15, RULE_id = 16, RULE_integer = 17, RULE_bool = 18;
	public static readonly string[] ruleNames = {
		"program", "declarations", "decl", "type", "sectype", "block", "command", 
		"noopCommand", "assignCommand", "ifCommand", "whileCommand", "printSCommand", 
		"printECommand", "getIntCommand", "getSecretIntCommand", "exp", "id", 
		"integer", "bool"
	};

	private static readonly string[] _LiteralNames = {
		null, "'decl'", "'begin'", "'end'", "':'", "','", "';'", "'bool'", "'int'", 
		"'Low'", "'High'", "'noop'", "':='", "'if'", "'{'", "'} else {'", "'}'", 
		"'while'", "'print_string'", "'print_expr'", "':= get_int()'", "':= get_secret_int()'", 
		"'+'", "'-'", "'*'", "'<='", "'=='", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "True", "False", "Identifier", "Int", "Single_string", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MiniCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(T__0);
			State = 39;
			declarations();
			State = 40;
			Match(T__1);
			State = 41;
			block();
			State = 42;
			Match(T__2);
			State = 43;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 45;
				decl();
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public IdContext v;
		public TypeContext t;
		public SectypeContext s;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectypeContext sectype() {
			return GetRuleContext<SectypeContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_localctx.v = id();
			State = 52;
			Match(T__3);
			State = 53;
			_localctx.t = type();
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 54;
				Match(T__4);
				State = 55;
				_localctx.s = sectype();
				}
			}

			State = 58;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectypeContext : ParserRuleContext {
		public SectypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectypeContext sectype() {
		SectypeContext _localctx = new SectypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_sectype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public CommandContext lc;
		public BlockContext b;
		public CommandContext c;
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				_localctx.lc = command();
				State = 65;
				_localctx.b = block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				_localctx.c = command();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoopCommandContext noopCommand() {
			return GetRuleContext<NoopCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignCommandContext assignCommand() {
			return GetRuleContext<AssignCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileCommandContext whileCommand() {
			return GetRuleContext<WhileCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSCommandContext printSCommand() {
			return GetRuleContext<PrintSCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintECommandContext printECommand() {
			return GetRuleContext<PrintECommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetIntCommandContext getIntCommand() {
			return GetRuleContext<GetIntCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetSecretIntCommandContext getSecretIntCommand() {
			return GetRuleContext<GetSecretIntCommandContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_command);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				noopCommand();
				State = 71;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				assignCommand();
				State = 74;
				Match(T__5);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76;
				ifCommand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 77;
				whileCommand();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 78;
				printSCommand();
				State = 79;
				Match(T__5);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 81;
				printECommand();
				State = 82;
				Match(T__5);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 84;
				getIntCommand();
				State = 85;
				Match(T__5);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 87;
				getSecretIntCommand();
				State = 88;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoopCommandContext : ParserRuleContext {
		public NoopCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noopCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoopCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoopCommandContext noopCommand() {
		NoopCommandContext _localctx = new NoopCommandContext(Context, State);
		EnterRule(_localctx, 14, RULE_noopCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignCommandContext : ParserRuleContext {
		public IdContext v;
		public ExpContext e;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public AssignCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignCommandContext assignCommand() {
		AssignCommandContext _localctx = new AssignCommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_localctx.v = id();
			State = 95;
			Match(T__11);
			State = 96;
			_localctx.e = exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		public ExpContext cond;
		public BlockContext ifTrue;
		public BlockContext ifFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(Context, State);
		EnterRule(_localctx, 18, RULE_ifCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__12);
			State = 99;
			_localctx.cond = exp(0);
			State = 100;
			Match(T__13);
			State = 101;
			_localctx.ifTrue = block();
			State = 102;
			Match(T__14);
			State = 103;
			_localctx.ifFalse = block();
			State = 104;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileCommandContext : ParserRuleContext {
		public ExpContext cond;
		public BlockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileCommandContext whileCommand() {
		WhileCommandContext _localctx = new WhileCommandContext(Context, State);
		EnterRule(_localctx, 20, RULE_whileCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(T__16);
			State = 107;
			_localctx.cond = exp(0);
			State = 108;
			Match(T__13);
			State = 109;
			_localctx.body = block();
			State = 110;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSCommandContext : ParserRuleContext {
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Single_string() { return GetToken(MiniCParser.Single_string, 0); }
		public PrintSCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSCommandContext printSCommand() {
		PrintSCommandContext _localctx = new PrintSCommandContext(Context, State);
		EnterRule(_localctx, 22, RULE_printSCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__17);
			State = 113;
			_localctx.s = Match(Single_string);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintECommandContext : ParserRuleContext {
		public ExpContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public PrintECommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printECommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintECommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintECommandContext printECommand() {
		PrintECommandContext _localctx = new PrintECommandContext(Context, State);
		EnterRule(_localctx, 24, RULE_printECommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(T__18);
			State = 116;
			_localctx.e = exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetIntCommandContext : ParserRuleContext {
		public IdContext v;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public GetIntCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getIntCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetIntCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetIntCommandContext getIntCommand() {
		GetIntCommandContext _localctx = new GetIntCommandContext(Context, State);
		EnterRule(_localctx, 26, RULE_getIntCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_localctx.v = id();
			State = 119;
			Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetSecretIntCommandContext : ParserRuleContext {
		public IdContext v;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public GetSecretIntCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getSecretIntCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetSecretIntCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetSecretIntCommandContext getSecretIntCommand() {
		GetSecretIntCommandContext _localctx = new GetSecretIntCommandContext(Context, State);
		EnterRule(_localctx, 28, RULE_getSecretIntCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_localctx.v = id();
			State = 122;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext left;
		public BoolContext b;
		public IntegerContext i;
		public IdContext v;
		public IToken op;
		public ExpContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
				{
				State = 125;
				_localctx.b = @bool();
				}
				break;
			case Int:
				{
				State = 126;
				_localctx.i = integer();
				}
				break;
			case Identifier:
				{
				State = 127;
				_localctx.v = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 145;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 130;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 131;
						_localctx.op = Match(T__21);
						State = 132;
						_localctx.right = exp(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 133;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 134;
						_localctx.op = Match(T__22);
						State = 135;
						_localctx.right = exp(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 136;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 137;
						_localctx.op = Match(T__23);
						State = 138;
						_localctx.right = exp(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 139;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 140;
						_localctx.op = Match(T__24);
						State = 141;
						_localctx.right = exp(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 142;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 143;
						_localctx.op = Match(T__25);
						State = 144;
						_localctx.right = exp(2);
						}
						break;
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(MiniCParser.Identifier, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 32, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_localctx.name = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(MiniCParser.Int, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 34, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_localctx.val = Match(Int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public IToken val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(MiniCParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(MiniCParser.False, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 36, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_localctx.val = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
				_localctx.val = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\x9F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\a', '\x3', '\x31', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x34', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'G', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', ']', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x83', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\x94', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x97', 
		'\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x2', '\x3', ' ', '\x15', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', '\x5', 
		'\x3', '\x2', '\t', '\n', '\x3', '\x2', '\v', '\f', '\x3', '\x2', '\x1D', 
		'\x1E', '\x2', '\x9C', '\x2', '(', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x6', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\b', '>', '\x3', '\x2', '\x2', '\x2', '\n', '@', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x46', '\x3', '\x2', '\x2', '\x2', '\xE', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '^', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x14', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'l', '\x3', '\x2', '\x2', '\x2', '\x18', 'r', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', 'u', '\x3', '\x2', '\x2', '\x2', '\x1C', 'x', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '{', '\x3', '\x2', '\x2', '\x2', ' ', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x9A', '\x3', '\x2', '\x2', '\x2', '&', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\a', '\x3', '\x2', '\x2', ')', '*', '\x5', '\x4', '\x3', 
		'\x2', '*', '+', '\a', '\x4', '\x2', '\x2', '+', ',', '\x5', '\f', '\a', 
		'\x2', ',', '-', '\a', '\x5', '\x2', '\x2', '-', '.', '\a', '\x2', '\x2', 
		'\x3', '.', '\x3', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\x5', '\x6', 
		'\x4', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x5', '\"', '\x12', '\x2', '\x36', '\x37', '\a', '\x6', '\x2', '\x2', 
		'\x37', ':', '\x5', '\b', '\x5', '\x2', '\x38', '\x39', '\a', '\a', '\x2', 
		'\x2', '\x39', ';', '\x5', '\n', '\x6', '\x2', ':', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\a', '\b', '\x2', '\x2', '=', '\a', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\t', '\x2', '\x2', '\x2', '?', '\t', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\t', '\x3', '\x2', '\x2', '\x41', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\x5', '\xE', '\b', '\x2', '\x43', 
		'\x44', '\x5', '\f', '\a', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x45', 'G', '\x5', '\xE', '\b', '\x2', '\x46', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\x5', '\x10', '\t', '\x2', 'I', 'J', '\a', 
		'\b', '\x2', '\x2', 'J', ']', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', 
		'\x12', '\n', '\x2', 'L', 'M', '\a', '\b', '\x2', '\x2', 'M', ']', '\x3', 
		'\x2', '\x2', '\x2', 'N', ']', '\x5', '\x14', '\v', '\x2', 'O', ']', '\x5', 
		'\x16', '\f', '\x2', 'P', 'Q', '\x5', '\x18', '\r', '\x2', 'Q', 'R', '\a', 
		'\b', '\x2', '\x2', 'R', ']', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x5', 
		'\x1A', '\xE', '\x2', 'T', 'U', '\a', '\b', '\x2', '\x2', 'U', ']', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\x5', '\x1C', '\xF', '\x2', 'W', 'X', 
		'\a', '\b', '\x2', '\x2', 'X', ']', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', 
		'\x5', '\x1E', '\x10', '\x2', 'Z', '[', '\a', '\b', '\x2', '\x2', '[', 
		']', '\x3', '\x2', '\x2', '\x2', '\\', 'H', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'K', '\x3', '\x2', '\x2', '\x2', '\\', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'O', '\x3', '\x2', '\x2', '\x2', '\\', 'P', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'S', '\x3', '\x2', '\x2', '\x2', '\\', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'Y', '\x3', '\x2', '\x2', '\x2', ']', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\r', '\x2', '\x2', '_', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x5', '\"', '\x12', '\x2', '\x61', 
		'\x62', '\a', '\xE', '\x2', '\x2', '\x62', '\x63', '\x5', ' ', '\x11', 
		'\x2', '\x63', '\x13', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\xF', '\x2', '\x2', '\x65', '\x66', '\x5', ' ', '\x11', '\x2', '\x66', 
		'g', '\a', '\x10', '\x2', '\x2', 'g', 'h', '\x5', '\f', '\a', '\x2', 'h', 
		'i', '\a', '\x11', '\x2', '\x2', 'i', 'j', '\x5', '\f', '\a', '\x2', 'j', 
		'k', '\a', '\x12', '\x2', '\x2', 'k', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\a', '\x13', '\x2', '\x2', 'm', 'n', '\x5', ' ', '\x11', '\x2', 
		'n', 'o', '\a', '\x10', '\x2', '\x2', 'o', 'p', '\x5', '\f', '\a', '\x2', 
		'p', 'q', '\a', '\x12', '\x2', '\x2', 'q', '\x17', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\a', '\x14', '\x2', '\x2', 's', 't', '\a', '!', '\x2', 
		'\x2', 't', '\x19', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\x15', 
		'\x2', '\x2', 'v', 'w', '\x5', ' ', '\x11', '\x2', 'w', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'y', '\x5', '\"', '\x12', '\x2', 'y', 'z', '\a', 
		'\x16', '\x2', '\x2', 'z', '\x1D', '\x3', '\x2', '\x2', '\x2', '{', '|', 
		'\x5', '\"', '\x12', '\x2', '|', '}', '\a', '\x17', '\x2', '\x2', '}', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\b', '\x11', '\x1', 
		'\x2', '\x7F', '\x83', '\x5', '&', '\x14', '\x2', '\x80', '\x83', '\x5', 
		'$', '\x13', '\x2', '\x81', '\x83', '\x5', '\"', '\x12', '\x2', '\x82', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\f', '\a', '\x2', '\x2', '\x85', 
		'\x86', '\a', '\x18', '\x2', '\x2', '\x86', '\x94', '\x5', ' ', '\x11', 
		'\b', '\x87', '\x88', '\f', '\x6', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\x19', '\x2', '\x2', '\x89', '\x94', '\x5', ' ', '\x11', '\a', '\x8A', 
		'\x8B', '\f', '\x5', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x1A', '\x2', 
		'\x2', '\x8C', '\x94', '\x5', ' ', '\x11', '\x6', '\x8D', '\x8E', '\f', 
		'\x4', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x1B', '\x2', '\x2', '\x8F', 
		'\x94', '\x5', ' ', '\x11', '\x5', '\x90', '\x91', '\f', '\x3', '\x2', 
		'\x2', '\x91', '\x92', '\a', '\x1C', '\x2', '\x2', '\x92', '\x94', '\x5', 
		' ', '\x11', '\x4', '\x93', '\x84', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x93', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x93', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x97', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '!', '\x3', '\x2', '\x2', '\x2', '\x97', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\x1F', '\x2', '\x2', '\x99', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', ' ', '\x2', '\x2', 
		'\x9B', '%', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\t', '\x4', 
		'\x2', '\x2', '\x9D', '\'', '\x3', '\x2', '\x2', '\x2', '\t', '\x32', 
		':', '\x46', '\\', '\x82', '\x93', '\x95',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
